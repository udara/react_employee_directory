{"version":3,"sources":["components/Header.js","components/Search.js","components/EmployeeTable.js","components/EmployeeDirectory.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Search","props","state","search","handleChange","bind","event","this","setState","target","name","value","on","type","onChange","EmployeeTable","employees","filter","employee","first","last","includes","gender","email","phone","map","EmployeeDirectory","searchKeyword","axios","get","response","data","results","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAYeA,E,uKARP,OACA,yBAAKC,UAAU,uBACX,uD,GAJSC,IAAMC,W,QC4BZC,E,kDA3BX,WAAYC,GAAO,IAAD,8BAEd,cAAMA,IACDC,MAAQ,CACTC,OAAS,QAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANN,E,yDASLC,GAETC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAQJ,EAAMG,OAAOE,QACnDJ,KAAKN,MAAME,OAAOI,KAAKL,MAAMC,U,+BAK7B,OACI,yBAAKN,UAAU,uBACf,8BACI,2BAAOe,IAAE,EAACC,KAAK,OAAOH,KAAK,SAASC,MAAOJ,KAAKL,MAAMC,OAAQW,SAAUP,KAAKH,qB,GArBxEN,IAAMC,WCsCZgB,E,uKApCF,IAAD,OACJ,OACI,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,sBAAf,QACA,yBAAKA,UAAU,YAAf,UACA,yBAAKA,UAAU,YAAf,SACA,yBAAKA,UAAU,YAAf,UAEAU,KAAKN,MAAMe,UAAUC,QAClB,SAAAC,GAAQ,OACHA,EAASR,KAAKS,MAAQ,IAAKD,EAASR,KAAKU,MAAMC,SAAS,EAAKpB,MAAME,SACpEe,EAASI,OAAOD,SAAS,EAAKpB,MAAME,SACpCe,EAASK,MAAMF,SAAS,EAAKpB,MAAME,SACnCe,EAASM,MAAMH,SAAS,EAAKpB,MAAME,WACpCsB,KAAI,SAAAP,GAAQ,OAClB,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,YACVqB,EAASR,KAAKS,MADnB,IAC2BD,EAASR,KAAKU,MAEzC,yBAAKvB,UAAU,YACVqB,EAASI,QAEd,yBAAKzB,UAAU,YACdqB,EAASK,OAEV,yBAAK1B,UAAU,YACdqB,EAASM,gB,GA7BF1B,IAAMC,W,iBCkCnB2B,E,kDA5BX,WAAYzB,GAAO,IAAD,8BAEd,cAAMA,IACDC,MAAQ,CAAEc,UAAY,GAAKb,OAAO,IACvC,EAAKA,OAAS,EAAKA,OAAOE,KAAZ,gBAJA,E,mDAOXsB,GAEHpB,KAAKC,SAAS,CAACL,OAAOwB,M,0KAIDC,IAAMC,IAAI,0C,OAA3BC,E,OACJvB,KAAKC,SAAS,CAACQ,UAAYc,EAASC,KAAKC,QAAS7B,OAAS,K,qIAI3D,OACA,6BACG,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQA,OAAQI,KAAKJ,SACrB,kBAAC,EAAD,CAAea,UAAWT,KAAKL,MAAMc,UAAWb,OAAQI,KAAKL,MAAMC,c,GAxB9CL,IAAMC,WCMvBkC,MARf,WACE,OACC,6BACI,kBAAC,EAAD,QCKaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5451a98b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n        <div className='container pt-2 pb-0'>\r\n            <h1>Employee Directory</h1>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nclass Search extends React.Component{\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        this.state = {\r\n            search : \"male\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        // Computed property name\r\n        this.setState({ [event.target.name] : event.target.value})\r\n        this.props.search(this.state.search)\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"container pt-5 pb-3\">\r\n            <form>\r\n                <input on type=\"text\" name=\"search\" value={this.state.search} onChange={this.handleChange} />\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nclass EmployeeTable extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row font-weight-bold\">\r\n                <div className=\"col-md-3 text-bold\">Name</div>\r\n                <div className=\"col-md-3\">Gender</div>\r\n                <div className=\"col-md-3\">Email</div>\r\n                <div className=\"col-md-3\">Phone</div>    \r\n                </div>\r\n               {this.props.employees.filter(\r\n                   employee => (\r\n                       (employee.name.first + \" \" +employee.name.last).includes(this.props.search) ||\r\n                       employee.gender.includes(this.props.search) ||  \r\n                       employee.email.includes(this.props.search) ||\r\n                       employee.phone.includes(this.props.search)\r\n                   )).map(employee => (\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3\">        \r\n                        {employee.name.first} {employee.name.last}\r\n                    </div>\r\n                    <div className=\"col-md-3\">        \r\n                        {employee.gender}\r\n                    </div>\r\n                    <div className=\"col-md-3\">        \r\n                    {employee.email}\r\n                    </div>\r\n                    <div className=\"col-md-3\">        \r\n                    {employee.phone}\r\n                    </div>   \r\n                </div>    \r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeTable;","import React from 'react';\r\nimport Header from './Header';\r\nimport Search from './Search';\r\nimport EmployeeTable from './EmployeeTable';\r\nimport axios from 'axios';\r\n\r\nclass EmployeeDirectory extends React.Component{\r\n    \r\n    constructor(props){\r\n\r\n        super(props);\r\n        this.state = { employees : [] , search:\"\"}\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n    search(searchKeyword)\r\n    {\r\n        this.setState({search:searchKeyword})\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let response = await axios.get('https://randomuser.me/api/?results=200')\r\n        this.setState({employees : response.data.results, search : ''});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n           <Header/>\r\n           <Search search={this.search}/>\r\n           <EmployeeTable employees={this.state.employees} search={this.state.search} />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeDirectory;","import React from 'react';\nimport EmployeeDirectory from './components/EmployeeDirectory'\n\n\nfunction App() {\n  return (\n   <div> \n       <EmployeeDirectory/>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}